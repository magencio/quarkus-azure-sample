# HTTP
# - Set an http port other than 8080 to be able to run both APIs at the same time during development
%dev.quarkus.http.port=8081
# APPLICATION PERFORMANCE MANAGEMENT (APM) AND MONITORING
# - Configuration for Azure Application Insights:
#   APPLICATIONINSIGHTS_CONNECTION_STRING environment variable must be set for the ApplicationInsights Java Agent,
#   but no need to reference it here. Should look like:
#   "InstrumentationKey=<your-key-here>;IngestionEndpoint=<your-ingestion-endpoint-here>"
# AUTHENTICATION
# - Logging
quarkus.log.category."io.quarkus.oidc".level=DEBUG
# - Configuration for Azure Active Directory (AAD) B2B authentication:
#   OIDC_AUTH_SERVER_URL environment variable should match the issuer ('iss' claim) of the JSON Web Token (JWT).
#   You may use the PostMan collection to get a JWT and jwt.ms to inspect it and see its claims.
#   OIDC_CLIENT_ID environment variable is the Application (client) ID of the application registered in AAD for the API.
%prod.quarkus.oidc.auth-server-url=${OIDC_AUTH_SERVER_URL}
%prod.quarkus.oidc.client-id=${OIDC_CLIENT_ID}
%dev.quarkus.oidc.auth-server-url=https://sts.windows.net/6d67b319-c089-47dc-9f27-7d003ccd1448/
%dev.quarkus.oidc.client-id=bdf45423-b892-40a3-b053-ae96af863050
# - AAD B2B stores app roles in a claim called /roles, not /groups
quarkus.oidc.roles.role-claim-path=roles
# - App type
quarkus.oidc.application-type=service
# - All endpoints are authenticated by default
quarkus.http.auth.permission.authenticated.paths=/*
quarkus.http.auth.permission.authenticated.policy=authenticated
# - Allow anonymous access to health endpoints
#   (used by e.g. Azure ReadHat OpenShift cluster to tell if the app is up and running)
quarkus.http.auth.permission.permit1.paths=/q/health/*
quarkus.http.auth.permission.permit1.policy=permit
quarkus.http.auth.permission.permit1.methods=GET
# - Allow anonymous access to dev and swagger related endpoints
%dev.quarkus.http.auth.permission.permit2.paths=/q/dev/*,/swagger-ui/*,/swagger
%dev.quarkus.http.auth.permission.permit2.policy=permit
%dev.quarkus.http.auth.permission.permit2.methods=GET
# OPEN API / SWAGGER
quarkus.smallrye-openapi.path=/swagger
quarkus.swagger-ui.path=/swagger-ui
quarkus.smallrye-openapi.info-title=Quarkus with Azure sample: Consumer API
%dev.quarkus.smallrye-openapi.info-title=Quarkus with Azure sample: Consumer API (development)
%test.quarkus.smallrye-openapi.info-title=Quarkus with Azure sample: Consumer API (test)
quarkus.smallrye-openapi.info-version=1.0.0
quarkus.smallrye-openapi.info-description=This API will let you retrieve the results of operations sent to the system.
# KAFKA
mp.messaging.incoming.new-operation.connector=smallrye-kafka
mp.messaging.incoming.new-operation.value.deserializer=com.microsoft.azure.quarkus.consumer.deserializers.NewOperationMessageDeserializer
mp.messaging.incoming.new-operation.value-deserialization-failure-handler=deserialization-failure-handler
mp.messaging.incoming.new-operation.failure-strategy=dead-letter-queue
mp.messaging.incoming.new-operation.dead-letter-queue.topic=new-operation-dead-letter
mp.messaging.incoming.new-operation.dead-letter-queue.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
# - Configuration for Event Hubs with Kafka interface:
#   KAFKA_BOOTSTRAP_SERVER environment variable should look like:
#   "<your-event-hub-namespace>.servicebus.windows.net:9093"
#   KAFKA_CONNECTION_STRING environment variable should be a connection string from a Shared access policy in the event
#   hub namespace, and should look like:
#   "Endpoint=sb://<your-event-hub-namespace>.servicebus.windows.net/;SharedAccessKeyName=<your-policy>;SharedAccessKey=<your-key>"
%prod.kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVER}
%prod.kafka.security.protocol=SASL_SSL
%prod.kafka.sasl.mechanism=PLAIN
%prod.kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="$ConnectionString" password="${KAFKA_CONNECTION_STRING}";
# - Fix Dev services port for testing
%dev.quarkus.kafka.devservices.port=49884
%test.quarkus.kafka.devservices.port=49884
# MONGODB
quarkus.mongodb.database=operations
# - Configuration for Azure Cosmos DB with API for MongoDB:
#   MONGODB_CONNECTION_STRING environment variable should be the connection string that can be found in Azure Cosmos DB,
#   and should start with "mondodb://".
%prod.quarkus.mongodb.connection-string=${MONGODB_CONNECTION_STRING}
# - Fix Dev services port for testing
%dev.quarkus.mongodb.devservices.port=49885
